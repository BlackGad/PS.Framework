<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:PS.WPF.Controls"
                    xmlns:theme="clr-namespace:PS.WPF.Theming.Markup"
                    xmlns:valueConverters="clr-namespace:PS.WPF.ValueConverters"
                    xmlns:markup="clr-namespace:PS.WPF.Markup">


    <ControlTemplate x:Key="{x:Static controls:GroupExpander+Resource.ToggleButtonTemplate}" TargetType="ToggleButton">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Path x:Name="Icon"
                  Grid.Column="0"
                  Width="8"
                  Height="8"
                  Margin="4"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0,0 V6 L 4,3 Z"
                  Fill="{theme:Brush MainForeground}"
                  SnapsToDevicePixels="True"
                  Stretch="Uniform" />
            <ContentPresenter Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Icon" Property="Fill" Value="{theme:Brush Accent}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Icon" Property="Data" Value="M 7,0 V7 H0 Z" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:GroupExpander+Resource.ToggleButtonStyle}" TargetType="ToggleButton">
        <Setter Property="Template" Value="{StaticResource {x:Static controls:GroupExpander+Resource.ToggleButtonTemplate}}" />
    </Style>

    <ControlTemplate x:Key="{x:Static controls:GroupExpander+Resource.ControlTemplate}" TargetType="controls:GroupExpander">
        <Grid x:Name="Layout">
            <Border Background="{TemplateBinding BorderBrush}" />
            <StackPanel Orientation="Vertical">
                <ToggleButton FontFamily="{theme:Font Strong}"
                              IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}"
                              Style="{StaticResource {x:Static controls:GroupExpander+Resource.ToggleButtonStyle}}">
                    <ContentPresenter Margin="{TemplateBinding HeaderPadding}" ContentSource="Header" />
                </ToggleButton>
                <Border Name="PART_IndentBorder"
                        Background="{TemplateBinding Background}"
                        Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Converter={x:Static valueConverters:BooleanConverters.ToVisibility}}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" />
                </Border>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowIndent" Value="True">
                <Setter TargetName="PART_IndentBorder" Property="Margin" Value="16,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:GroupExpander+Resource.ControlStyle}" TargetType="controls:GroupExpander">
        <Setter Property="HeaderPadding" Value="2" />
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ShowIndent" Value="True" />
        <Setter Property="Template" Value="{StaticResource {x:Static controls:GroupExpander+Resource.ControlTemplate}}" />
        <Style.Triggers>
            <!--  WPF Engine cannot resolve Bindings in straight forward Setters. So Bypass this with triggers  -->
            <DataTrigger Binding="{Binding Source={markup:Boolean True}}" Value="{markup:Boolean True}">
                <Setter Property="Background" Value="{theme:Brush Main}" />
                <Setter Property="BorderBrush" Value="{theme:Brush MainBorderHigh}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>