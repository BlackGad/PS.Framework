<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:markup="clr-namespace:PS.WPF.Markup"
                    xmlns:theme="clr-namespace:PS.WPF.Theming.Markup"
                    xmlns:valueConverters="clr-namespace:PS.WPF.ValueConverters"
                    xmlns:controls="clr-namespace:PS.WPF.Controls.Ribbon"
                    xmlns:components="clr-namespace:PS.WPF.Components">

    <ControlTemplate x:Key="{x:Static controls:RibbonApplicationMenu+Resource.MainButtonTemplate}"
                     TargetType="RibbonToggleButton">
        <Grid x:Name="Layout"
              Background="Transparent"
              SnapsToDevicePixels="True">
            <components:StoreBrush.Background>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource AncestorType=controls:RibbonApplicationMenu}"
                             Path="Accent" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.(controls:Ribbon.Accent)"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Background>
            <Border x:Name="Border"
                    Background="{Binding ElementName=Layout, Path=(components:StoreBrush.Background)}"
                    CornerRadius="0,2,0,0" />
            <StackPanel Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Orientation="Horizontal">
                <Image x:Name="Icon"
                       Width="16"
                       Height="16"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"
                       RenderOptions.BitmapScalingMode="NearestNeighbor"
                       RenderOptions.EdgeMode="Aliased"
                       Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RibbonApplicationMenu}}, Path=SmallImageSource}" />
                <TextBlock x:Name="Header"
                           VerticalAlignment="Center"
                           Foreground="{Binding ElementName=Border, Path=Background, Converter={x:Static valueConverters:ColorConverters.ContrastForeground}}"
                           Text="{TemplateBinding Label}" />
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background"
                        Value="{Binding ElementName=Layout, Path=(components:StoreBrush.Background), Converter={x:Static valueConverters:ColorConverters.Tint}, ConverterParameter={markup:Double 0.2}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="Background"
                        Value="{Binding ElementName=Layout, Path=(components:StoreBrush.Background), Converter={x:Static valueConverters:ColorConverters.Tint}, ConverterParameter={markup:Double 0.2}}" />
            </MultiTrigger>

            <DataTrigger
                Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RibbonApplicationMenu}}, Path=SmallImageSource}"
                Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger
                Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RibbonApplicationMenu}}, Path=Label, Converter={x:Static valueConverters:StringConverters.IsEmpty}}"
                Value="True">
                <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RibbonApplicationMenu}}, Path=SmallImageSource}"
                        Value="{x:Null}" />
                    <Condition
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:RibbonApplicationMenu}}, Path=Label, Converter={x:Static valueConverters:StringConverters.IsEmpty}}"
                        Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="Margin" Value="0,0,2,0" />
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:RibbonApplicationMenu+Resource.MainButtonStyle}" TargetType="RibbonToggleButton">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FocusManager.IsFocusScope" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="0,1,0,0" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static controls:RibbonApplicationMenu+Resource.MainButtonTemplate}}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
    </Style>

    <ControlTemplate x:Key="{x:Static controls:RibbonApplicationMenu+Resource.ControlTemplate}"
                     TargetType="controls:RibbonApplicationMenu">
        <Grid x:Name="Layout"
              Background="Transparent"
              Focusable="False">
            <components:StoreBrush.Accent>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Accent"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.(controls:Ribbon.Accent)"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Accent>
            <components:StoreBrush.Background>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Background"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.Background"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Background>
            <components:StoreBrush.BorderBrush>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="BorderBrush"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.BorderBrush"
                             Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.BorderBrush>

            <RibbonToggleButton x:Name="PART_ToggleButton"
                                Padding="{TemplateBinding Padding}"
                                Background="{Binding ElementName=Layout, Path=(components:StoreBrush.Background)}"
                                FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                Label="{TemplateBinding Label}"
                                SmallImageSource="{TemplateBinding SmallImageSource}"
                                Style="{StaticResource {x:Static controls:RibbonApplicationMenu+Resource.MainButtonStyle}}"
                                ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                ToolTipTitle="{TemplateBinding ToolTipTitle}" />
            <Border x:Name="PopupAnchor"
                    Height="1"
                    Margin="1,-1,0,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Top" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                   PlacementTarget="{Binding ElementName=PopupAnchor}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <Grid>
                    <Border x:Name="PopupBorder"
                            Background="{Binding ElementName=Layout, Path=(components:StoreBrush.Background)}"
                            BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.BorderBrush)}"
                            BorderThickness="1">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{Binding ElementName=PART_ToggleButton, Path=ActualHeight}" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border x:Name="HeaderBorder"
                                    Grid.Row="0"
                                    Background="Transparent"
                                    BorderBrush="{Binding ElementName=PopupBorder, Path=BorderBrush}"
                                    BorderThickness="0,0,0,1" />

                            <RibbonToggleButton x:Name="PART_PopupToggleButton"
                                                Grid.Row="0"
                                                Width="{Binding ElementName=PART_ToggleButton, Path=ActualWidth}"
                                                Margin="-2,0,0,0"
                                                Padding="{TemplateBinding Padding}"
                                                HorizontalAlignment="Left"
                                                Background="{Binding ElementName=Layout, Path=(components:StoreBrush.Accent)}"
                                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
                                                Focusable="False"
                                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                                Label="{TemplateBinding Label}"
                                                Style="{StaticResource {x:Static controls:RibbonApplicationMenu+Resource.MainButtonStyle}}" />

                            <Grid Grid.Row="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="1" />
                                    <ColumnDefinition Width="300" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="MainPaneBorder">
                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                  CanContentScroll="True"
                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="True" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>

                                <Border x:Name="VerticalBorder"
                                        Grid.Column="1"
                                        Background="{Binding ElementName=PopupBorder, Path=BorderBrush}" />

                                <Border x:Name="PART_SubmenuPlaceholder"
                                        Grid.Column="2"
                                        Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}">
                                    <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter"
                                                      ContentTemplateSelector="{TemplateBinding AuxiliaryPaneContentTemplateSelector}"
                                                      ContentSource="AuxiliaryPaneContent"
                                                      ContentTemplate="{TemplateBinding AuxiliaryPaneContentTemplate}" />
                                </Border>
                            </Grid>

                            <Border x:Name="FooterBorder"
                                    Grid.Row="2"
                                    Background="Transparent"
                                    BorderBrush="{Binding ElementName=PopupBorder, Path=BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <ContentPresenter x:Name="PART_FooterPaneContentPresenter"
                                                  MinHeight="12"
                                                  Margin="2"
                                                  ContentTemplateSelector="{TemplateBinding FooterPaneContentTemplateSelector}"
                                                  ContentSource="FooterPaneContent"
                                                  ContentTemplate="{TemplateBinding FooterPaneContentTemplate}" />
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>

            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:RibbonApplicationMenu+Resource.ControlStyle}"
           TargetType="controls:RibbonApplicationMenu">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="15,0" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static controls:RibbonApplicationMenu+Resource.ControlTemplate}}" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>