<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:markup="clr-namespace:PS.WPF.Markup"
                    xmlns:theme="clr-namespace:PS.WPF.Theme"
                    xmlns:valueConverters="clr-namespace:PS.WPF.ValueConverters"
                    xmlns:controls="clr-namespace:PS.WPF.Controls.Ribbon.Controls"
                    xmlns:components="clr-namespace:PS.WPF.Components">

    <ControlTemplate x:Key="{x:Static controls:RibbonButton+Resource.ControlTemplate}" TargetType="controls:RibbonButton">
        <Grid x:Name="Layout"
              Background="Transparent"
              SnapsToDevicePixels="True">
            <components:StoreBrush.Background>
                <PriorityBinding FallbackValue="{x:Static theme:ThemeBrushes.Main}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Background" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.Background" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Background>
            <components:StoreBrush.BorderBrush>
                <PriorityBinding FallbackValue="{x:Static theme:ThemeBrushes.MainBorder}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="BorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.BorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.BorderBrush>
            <Border x:Name="Border"
                    BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.BorderBrush)}"
                    BorderThickness="{TemplateBinding BorderThickness}" />
            <Border x:Name="MouseOverBorder"
                    BorderThickness="1"
                    Visibility="Hidden">
                <Border.Background>
                    <PriorityBinding>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MouseOverBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.MouseOverBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding ElementName="Layout" Path="(components:StoreBrush.Background)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.1}" />
                    </PriorityBinding>
                </Border.Background>
                <Border.BorderBrush>
                    <PriorityBinding>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MouseOverBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.MouseOverBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding ElementName="Layout" Path="(components:StoreBrush.BorderBrush)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.1}" />
                    </PriorityBinding>
                </Border.BorderBrush>
            </Border>
            <Border x:Name="PressedBorder"
                    BorderThickness="1"
                    Visibility="Hidden">
                <Border.Background>
                    <PriorityBinding>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="PressedBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.PressedBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding ElementName="Layout" Path="(components:StoreBrush.Background)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.3}" />
                    </PriorityBinding>
                </Border.Background>
                <Border.BorderBrush>
                    <PriorityBinding>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="PressedBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.PressedBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                        <Binding ElementName="Layout" Path="(components:StoreBrush.BorderBrush)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.3}" />
                    </PriorityBinding>
                </Border.BorderBrush>
            </Border>

            <controls:RibbonButtonContent Padding="{TemplateBinding Padding}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                          ImageSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ControlSizeDefinition.ImageSize}"
                                          IsInQuickAccessToolBar="{TemplateBinding IsInQuickAccessToolBar}"
                                          IsLabelVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ControlSizeDefinition.IsLabelVisible}"
                                          Label="{TemplateBinding Label}"
                                          LabelGeometry="{TemplateBinding RibbonTwoLineText.PathData}"
                                          LabelTextAlignment="{TemplateBinding RibbonTwoLineText.TextAlignment}"
                                          LargeImageSource="{TemplateBinding LargeImageSource}"
                                          SmallImageSource="{TemplateBinding SmallImageSource}" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="PressedBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:RibbonButton+Resource.ControlStyle}" TargetType="controls:RibbonButton">
        <Setter Property="ClickMode" Value="Release" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource {x:Static controls:RibbonButton+Resource.ControlTemplate}}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

</ResourceDictionary>