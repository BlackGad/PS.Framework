<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:aware="clr-namespace:PS.Patterns.Aware;assembly=PS.Primitives"
                    xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                    xmlns:data="clr-namespace:PS.WPF.Data"
                    xmlns:input="clr-namespace:System.Windows.Input;assembly=System"
                    xmlns:markup="clr-namespace:PS.WPF.Markup"
                    xmlns:resources="clr-namespace:PS.WPF.Resources"
                    xmlns:theme="clr-namespace:PS.WPF.Theme"
                    xmlns:valueConverters="clr-namespace:PS.WPF.ValueConverters"
                    xmlns:controls="clr-namespace:PS.WPF.Controls.Ribbon.Controls"
                    xmlns:ribbon="clr-namespace:PS.WPF.Controls.Ribbon"
                    xmlns:components="clr-namespace:PS.WPF.Components">

    <ResourceDictionary.MergedDictionaries>
        <resources:SharedResourceDictionary Source="/PS.WPF;component/Controls/Ribbon/RibbonResizeThumbs.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="ArrowGeometry">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <Geometry x:Key="CheckGeometry">M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z</Geometry>

    <ControlTemplate x:Key="{x:Static controls:RibbonMenuItem+Resource.ControlTemplate}" TargetType="controls:RibbonMenuItem">
        <Grid Name="Layout"
              Background="{Binding RelativeSource={RelativeSource Self}, Path=(components:StoreBrush.Background)}"
              SnapsToDevicePixels="True"
              TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(components:StoreBrush.Foreground)}">
            <components:StoreBrush.Background>
                <PriorityBinding FallbackValue="{x:Static theme:ThemeBrushes.Main}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Background" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.Background" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Background>
            <components:StoreBrush.BorderBrush>
                <PriorityBinding FallbackValue="{x:Static theme:ThemeBrushes.MainBorder}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="BorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.BorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.BorderBrush>
            <components:StoreBrush.Foreground>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Foreground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.Foreground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource Self}" Path="Background" Converter="{x:Static valueConverters:ColorConverters.ContrastForeground}" />
                </PriorityBinding>
            </components:StoreBrush.Foreground>
            <components:StoreBrush.MouseOver>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MouseOverBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.MouseOverBorderBrush" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource Self}" Path="(components:StoreBrush.Background)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.2}" />
                </PriorityBinding>
            </components:StoreBrush.MouseOver>
            <components:StoreBrush.MouseOverBorder>
                <PriorityBinding>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MouseOverBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.MouseOverBackground" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource Self}" Path="(components:StoreBrush.BorderBrush)" Converter="{x:Static valueConverters:ColorConverters.Shade}" ConverterParameter="{markup:Double 0.1}" />
                </PriorityBinding>
            </components:StoreBrush.MouseOverBorder>
            <components:StoreBrush.Accent>
                <PriorityBinding FallbackValue="{x:Static theme:ThemeBrushes.Accent}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Accent" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Ribbon.(ribbon:Ribbon.Accent)" Converter="{x:Static valueConverters:ObjectConverters.UnsetIfNull}" />
                </PriorityBinding>
            </components:StoreBrush.Accent>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" MinWidth="44" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>

            <Border x:Name="PART_MouseOverBorder"
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOverBorder)}"
                    BorderThickness="1"
                    Visibility="Hidden" />
            <Border x:Name="PART_MouseOverBorderSeparator"
                    Grid.Column="2"
                    Width="1"
                    Background="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOverBorder)}"
                    Visibility="Hidden" />

            <Popup x:Name="PART_Popup"
                   Grid.Column="0"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <Border x:Name="PopupBorder"
                        Background="{Binding ElementName=Layout, Path=(components:StoreBrush.Background)}"
                        BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.BorderBrush)}"
                        BorderThickness="1">
                    <Grid Margin="1">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      CanContentScroll="True"
                                      HorizontalScrollBarVisibility="Disabled"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            RenderOptions.ClearTypeHint="Enabled" />
                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Background="Transparent"
                                BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.BorderBrush)}"
                                BorderThickness="0,1,0,0"
                                Visibility="Collapsed">
                            <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource {x:Static ribbon:RibbonResizeThumbs.ThumbBothRightTopStyle}}" />
                        </Border>
                    </Grid>
                </Border>
            </Popup>

            <Border x:Name="PART_ActionOverlay"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Background="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOver)}"
                    BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOverBorder)}"
                    BorderThickness="1"
                    Visibility="Hidden" />
            <Border x:Name="PART_ArrowOverlay"
                    Grid.Column="2"
                    Grid.ColumnSpan="2"
                    Background="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOver)}"
                    BorderBrush="{Binding ElementName=Layout, Path=(components:StoreBrush.MouseOverBorder)}"
                    BorderThickness="1"
                    Visibility="Hidden" />
            <Image x:Name="PART_Image"
                   Grid.Column="0"
                   Width="16"
                   Height="16"
                   Margin="2,1"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />

            <Path x:Name="PART_Checked"
                  Grid.Column="0"
                  Width="14"
                  Height="14"
                  Margin="2,1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="{StaticResource CheckGeometry}"
                  Fill="{Binding ElementName=Layout, Path=(components:StoreBrush.Accent)}"
                  SnapsToDevicePixels="True"
                  Stretch="Uniform"
                  Visibility="Hidden" />

            <ContentPresenter x:Name="PART_Content"
                              Grid.Column="1"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              RecognizesAccessKey="True" />
            <Button x:Name="PART_Action"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Command="{TemplateBinding Command}"
                    CommandParameter="{TemplateBinding CommandParameter}">
                <Button.Template>
                    <ControlTemplate>
                        <Grid Background="Transparent" />
                    </ControlTemplate>
                </Button.Template>
            </Button>

            <Path x:Name="PART_Arrow"
                  Grid.Column="3"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="{StaticResource ArrowGeometry}"
                  Fill="{Binding ElementName=Layout, Path=(components:StoreBrush.Foreground)}"
                  Visibility="Visible" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource {x:Static ribbon:RibbonResizeThumbs.ThumbVerticalStyle}}" />
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="PART_Action" Property="Visibility" Value="Hidden" />
                <Setter TargetName="PART_Arrow" Property="Visibility" Value="Hidden" />
                <Setter TargetName="PART_Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_Checked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="PART_MouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger SourceName="PART_Action" Property="IsPressed" Value="True">
                <Setter TargetName="PART_ActionOverlay" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger SourceName="PART_Action" Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Content" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="Command" Value="{x:Null}">
                <Setter TargetName="PART_Action" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="PART_ArrowOverlay" Property="Visibility" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Action" Property="Visibility" Value="Visible" />
                    <Condition SourceName="PART_Arrow" Property="Visibility" Value="Hidden" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Action" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_Action" Property="Grid.ColumnSpan" Value="4" />
                <Setter TargetName="PART_ActionOverlay" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_ActionOverlay" Property="Grid.ColumnSpan" Value="4" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Action" Property="Visibility" Value="Hidden" />
                    <Condition SourceName="PART_Arrow" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ArrowOverlay" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_ArrowOverlay" Property="Grid.ColumnSpan" Value="4" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Action" Property="IsEnabled" Value="False" />
                    <Condition SourceName="PART_Arrow" Property="Visibility" Value="Hidden" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Content" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_MouseOverBorder" Property="Visibility" Value="Hidden" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Action" Property="Visibility" Value="Hidden" />
                    <Condition SourceName="PART_Arrow" Property="Visibility" Value="Hidden" />
                    <Condition Property="IsCheckable" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Content" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_MouseOverBorder" Property="Visibility" Value="Hidden" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Action" Property="Visibility" Value="Visible" />
                    <Condition SourceName="PART_Arrow" Property="Visibility" Value="Visible" />
                    <Condition SourceName="PART_MouseOverBorder" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_MouseOverBorderSeparator" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static controls:RibbonMenuItem+Resource.ControlStyle}" TargetType="controls:RibbonMenuItem">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="Header" Value="{Binding}" />
        <Setter Property="Padding" Value="3,5" />
        <Setter Property="Template" Value="{StaticResource {x:Static controls:RibbonMenuItem+Resource.ControlTemplate}}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IChildrenAware}}" Value="True">
                <Setter Property="ItemsSource">
                    <Setter.Value>
                        <Binding Path="Children" Converter="{x:Static valueConverters:CollectionConverters.Sort}">
                            <Binding.ConverterParameter>
                                <data:ObjectCollection>
                                    <componentModel:SortDescription PropertyName="Order" />
                                </data:ObjectCollection>
                            </Binding.ConverterParameter>
                        </Binding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IOrderAware}}" Value="True">
                <Setter Property="Order" Value="{Binding Order}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type input:ICommand}}" Value="True">
                <Setter Property="Command" Value="{Binding}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IIsSelectedAware}}" Value="True">
                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" />
                <Setter Property="IsCheckable" Value="True" />
                <Setter Property="IsChecked" Value="{Binding IsSelected}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:ICommandAware}}" Value="True">
                <Setter Property="Command" Value="{Binding Command}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IIsVisibleAware}}" Value="True">
                <Setter Property="Visibility" Value="{Binding IsVisible, Converter={x:Static valueConverters:BooleanConverters.ToVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:ICommandParameterAware}}" Value="True">
                <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IIconAware}}" Value="True">
                <Setter Property="ImageSource" Value="{Binding Icon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="QuickAccessToolBarImageSource" Value="{Binding Icon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="ToolTipImageSource" Value="{Binding Icon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:ISmallIconAware}}" Value="True" />
                    <Condition Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.Exist}, Path=SmallIcon}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ImageSource" Value="{Binding SmallIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="QuickAccessToolBarImageSource" Value="{Binding SmallIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="ToolTipImageSource" Value="{Binding SmallIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:ILargeIconAware}}" Value="True" />
                    <Condition Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.Exist}, Path=LargeIcon}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ImageSource" Value="{Binding LargeIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="QuickAccessToolBarImageSource" Value="{Binding LargeIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="ToolTipImageSource" Value="{Binding LargeIcon, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:ITitleAware}}" Value="True">
                <Setter Property="Header" Value="{Binding Title}" />
                <Setter Property="ToolTipTitle" Value="{Binding Title}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IDescriptionAware}}" Value="True">
                <Setter Property="ToolTipDescription" Value="{Binding Description}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IToolTipAware}}" Value="True">
                <Setter Property="ToolTipDescription" Value="{Binding ToolTipDescription}" />
                <Setter Property="ToolTipImageSource" Value="{Binding ToolTipImage, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="ToolTipTitle" Value="{Binding ToolTipTitle}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={x:Static valueConverters:ObjectConverters.AssignableFrom}, ConverterParameter={x:Type aware:IExtendedToolTipAware}}" Value="True">
                <Setter Property="ToolTipFooterDescription" Value="{Binding ToolTipFooterDescription}" />
                <Setter Property="ToolTipFooterImageSource" Value="{Binding ToolTipFooterImage, Converter={x:Static valueConverters:ImageConverters.Generic}}" />
                <Setter Property="ToolTipFooterTitle" Value="{Binding ToolTipFooterTitle}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>