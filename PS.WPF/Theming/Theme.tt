<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ output extension=".Generated.cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#
	var configurationFilePath = this.Host.ResolvePath("Theme.xml");
	var configuration = XDocument.Load(configurationFilePath);

	var colorElements = configuration.XPathSelectElements("//Theme/Definition/Color[@Name and @Name[not(.=\"\")]]");
	var colors = colorElements.Select(c =>
	{
		var name = c.Attribute(XName.Get("Name")).Value;
		try
		{
			var result = new TemplateColor
			{
				Name = name,
				Value = c.Attribute(XName.Get("Value"))?.Value,
				Transform = ColorTransform.Parse(c.Attribute(XName.Get("Transform"))?.Value)
			};
			result.FieldName = char.ToLower(result.Name[0]) + result.Name.Substring(1);
			return result;
		}
		catch (Exception e)
		{
			throw new Exception($"Color '{name}' definition is invalid", e);
		}
	}).ToList();

	var colorOpacityElements = configuration.XPathSelectElements("//Theme/Definition/AdditionalColorOpacity[@Name and @Name[not(.=\"\")]]");
	var colorOpacities = colorOpacityElements.Select(c =>
	{
		var name = c.Attribute(XName.Get("Name")).Value;
		try
		{
			var result = new TemplateColorOpacity
			{
				Name = name,
				Value = c.Attribute(XName.Get("Value"))?.Value,
				Postfix = c.Attribute(XName.Get("Postfix"))?.Value
			};
			return result;
		}
		catch (Exception e)
		{
			throw new Exception($"Color opacity '{name}' definition is invalid", e);
		}
	}).ToList();

	var fontElements = configuration.XPathSelectElements("//Theme/Definition/Font[@Name and @Name[not(.=\"\")]]");
	var fonts = fontElements.Select(c =>
	{
		var name = c.Attribute(XName.Get("Name")).Value;
		try
		{
			var result = new TemplateFont
			{
				Name = name,
				Value = c.Attribute(XName.Get("Value"))?.Value,
			};
			result.FieldName = char.ToLower(result.Name[0]) + result.Name.Substring(1);
			return result;
		}
		catch (Exception e)
		{
			throw new Exception($"Font '{name}' definition is invalid", e);
		}
	}).ToList();

	var fontSizeElements = configuration.XPathSelectElements("//Theme/Definition/FontSize[@Name and @Name[not(.=\"\")]]");
	var fontSizes = fontSizeElements.Select(c =>
	{
		var name = c.Attribute(XName.Get("Name")).Value;
		try
		{
			var result = new TemplateFontSize
			{
				Name = name,
				Value = c.Attribute(XName.Get("Value"))?.Value,
			};
			result.FieldName = char.ToLower(result.Name[0]) + result.Name.Substring(1);
			return result;
		}
		catch (Exception e)
		{
			throw new Exception($"Font size '{name}' definition is invalid", e);
		}
	}).ToList();
#>
using System;
using System.ComponentModel;
using System.Windows.Media;
using PS.WPF.ValueConverters;

namespace PS.WPF.Theming
{
    public enum ThemeColor
    {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
        <#= propertyName #>,
<#
	}
#>
    }
    
    public enum ThemeColorOpacity
    {
        [DefaultValue(1.0)]
        None,
<#
	foreach (var colorOpacity in colorOpacities)
	{
#>
        [DefaultValue(<#= colorOpacity.Value #>)]
        [PostfixAttribute("<#= colorOpacity.Postfix #>")]
        <#= colorOpacity.Name #>,
<#
	}
#>
    }

    public enum ThemeFont
    {
<#
	foreach (var font in fonts)
	{
		var propertyName = font.Name;
#>
        <#= propertyName #>,
<#
	}
#>
    }

    public enum ThemeFontSize
    {
<#
	foreach (var fontSize in fontSizes)
	{
		var propertyName = fontSize.Name;
#>
        <#= propertyName #>,
<#
	}
#>
    }

    public sealed class ThemeFonts : BaseNotifyPropertyChanged
    {
<#
	foreach (var font in fonts)
	{
		var propertyName = font.Name;
		var fieldName = font.FieldName;
#>
        private FontFamily _<#= fieldName #>;
        public FontFamily <#= propertyName #>
        {
            get { return _<#= fieldName #>; }
            set { SetField(ref _<#= fieldName #>, value); }
        }
<#
	}
#>

        public FontFamily this[ThemeFont font]
        {
            get
            {
                switch(font)
                {
<#
	foreach (var font in fonts)
	{
		var propertyName = font.Name;
#>
                    case ThemeFont.<#= propertyName #>: return <#= propertyName #>;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{font} is unknown");
                }
            }
            set
            {
                switch(font)
                {
<#
	foreach (var font in fonts)
	{
		var propertyName = font.Name;
#>
                    case ThemeFont.<#= propertyName #>: <#= propertyName #> = value; break;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{font} is unknown");
                }
            }
        }
    }

    public sealed class ThemeFontSizes : BaseNotifyPropertyChanged
    {
<#
	foreach (var fontSize in fontSizes)
	{
		var propertyName = fontSize.Name;
		var fieldName = fontSize.FieldName;
#>
        private double _<#= fieldName #>;
        public double <#= propertyName #>
        {
            get { return _<#= fieldName #>; }
            set { SetField(ref _<#= fieldName #>, value); }
        }
<#
	}
#>

        public double this[ThemeFontSize fontSize]
        {
            get
            {
                switch(fontSize)
                {
<#
	foreach (var fontSize in fontSizes)
	{
		var propertyName = fontSize.Name;
#>
                    case ThemeFontSize.<#= propertyName #>: return <#= propertyName #>;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{fontSize} is unknown");
                }
            }
            set
            {
                switch(fontSize)
                {
<#
	foreach (var fontSize in fontSizes)
	{
		var propertyName = fontSize.Name;
#>
                    case ThemeFontSize.<#= propertyName #>: <#= propertyName #> = value; break;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{fontSize} is unknown");
                }
            }
        }
    }

    public sealed class ThemeColors : BaseNotifyPropertyChanged
    {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
		var fieldName = color.FieldName;
#>
        private Color _<#= fieldName #>;
        public Color <#= propertyName #>
        {
            get { return _<#= fieldName #>; }
            set
            {
                if(SetField(ref _<#= fieldName #>, value))
                {
<#
		foreach (var colorOpacity in colorOpacities)
		{
#>
                    <#= propertyName #><#= colorOpacity.Postfix #> = ColorConverters.ApplyOpacity(value, <#= colorOpacity.Value #>); OnPropertyChanged("<#= propertyName #><#= colorOpacity.Postfix #>");
<#
		}
#>

                    var args = new ColorChangedEventArgs("<#= propertyName #>", 
<#
		foreach (var colorOpacity in colorOpacities)
		{
#>
                                                         <#= propertyName #><#= colorOpacity.Postfix #>,
<#
		}
#>
                                                         value);
                    ColorChanged?.Invoke(this, args);
                }
            }
        }
<#
		foreach (var colorOpacity in colorOpacities)
		{
#>
        public Color <#= propertyName #><#= colorOpacity.Postfix #> { get; private set; }
<#
		}
#>

<#
	}
#>

        public Color this[ThemeColor color]
        {
            get
            {
                switch(color)
                {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
                    case ThemeColor.<#= propertyName #>: return <#= propertyName #>;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{color} is unknown");
                }
            }
            set
            {
                switch(color)
                {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
                    case ThemeColor.<#= propertyName #>: <#= propertyName #> = value; break;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{color} is unknown");
                }
            }
        }

        public event EventHandler<ColorChangedEventArgs> ColorChanged;      
    }

    public sealed class ThemeBrushes : BaseNotifyPropertyChanged
    {
        internal ThemeBrushes(ThemeColors colors)
        {
            if (colors == null) throw new ArgumentNullException(nameof(colors));
            colors.ColorChanged += OnColorChanged;
        }
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
        public Brush <#= propertyName #> { get; private set; }
<#
		foreach (var colorOpacity in colorOpacities)
		{
#>
        public Brush <#= propertyName #><#= colorOpacity.Postfix #> { get; private set; }
<#
		}
#>

<#
	}
#>
        public Brush this[ThemeColor color]
        {
            get
            {
                switch(color)
                {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
                    case ThemeColor.<#= propertyName #>: return <#= propertyName #>;
<#
	}
#>
                    default:
                        throw new ArgumentException($"{color} is unknown");
                }
            }
        }
        
        private void OnColorChanged(object sender, ColorChangedEventArgs e)
        {
            switch (e.Name)
            {
<#
	foreach (var color in colors)
	{
		var propertyName = color.Name;
#>
                case "<#= propertyName #>":
                    <#= propertyName #> = new SolidColorBrush(e.Value); OnPropertyChanged("<#= propertyName #>");
<#
		foreach (var colorOpacity in colorOpacities)
		{
#>
                    <#= propertyName #><#= colorOpacity.Postfix #> = new SolidColorBrush(e.<#= colorOpacity.Name #>); OnPropertyChanged("<#= propertyName #><#= colorOpacity.Postfix #>");
<#
		}
#>
                    break;
<#
	}
#>
                default:
                    throw new InvalidCastException($"{e.Name} property is not defined in brushes");
            }
        }
    }

    public sealed class ThemeCurrent : Theme
    {
        internal ThemeCurrent()
        {
            Apply(new ThemeDefault());
        }
        
        public void Apply(Theme theme)
        {
            if (ReferenceEquals(theme, this)) return;

<#
	foreach (var color in colors)
	{
#>
            Colors.<#= color.Name #> = theme.Colors.<#= color.Name #>;
<#
	}
#>

<#
	foreach (var font in fonts)
	{
#>
            Fonts.<#= font.Name #> = theme.Fonts.<#= font.Name #>;
<#
	}
#>

<#
	foreach (var fontSize in fontSizes)
	{
#>
            FontSizes.<#= fontSize.Name #> = theme.FontSizes.<#= fontSize.Name #>;
<#
	}
#>
        }
	}

    public class ThemeDefault : Theme
    {
        public ThemeDefault(
<#
	foreach (var color in colors)
	{
#>
            Color? <#= color.Name #> = null,
<#
	}

	foreach (var font in fonts)
	{
#>
            FontFamily <#= font.Name #> = null,
<#
	}

	for (var i = 0; i < fontSizes.Count; i++)
	{
		var fontSize = fontSizes[i];
#>
            double? <#= fontSize.Name #> = null<#if(i < fontSizes.Count - 1){#>,
<#}#>
<#
	}
#>)
        {
<#
	foreach (var color in colors)
	{
		if (string.IsNullOrEmpty(color.Value))
		{
			continue;
		}
#>
            Colors.<#= color.Name #> = <#=color.Name#> ?? (Color)ColorConverter.ConvertFromString("<#= color.Value #>");
<#
	}
#>
<#
	foreach (var color in colors)
	{
		if (color.Transform == null)
		{
			continue;
		}
#>
            Colors.<#= color.Name #> = <#=color.Name#> ?? ColorConverters.Apply<#= color.Transform.Effect #>(Colors.<#= color.Transform.Source #>, <#= color.Transform.Coefficient #>);
<#
	}
#>

<#
	foreach (var fontSize in fontSizes)
	{
		var propertyName = fontSize.Name;
		var value = fontSize.Value;
#>
            FontSizes.<#= propertyName #> = <#=propertyName#> ?? <#= value #>;
<#
	}
#>

<#
	foreach (var font in fonts)
	{
		var propertyName = font.Name;
		var value = font.Value;
#>
            Fonts.<#= propertyName #> = <#=propertyName#> ?? new FontFamily("<#= value #>");
<#
	}
#>
        }
    }

    public class ColorChangedEventArgs : EventArgs
    {
        public ColorChangedEventArgs(string name, 
<#
	foreach (var colorOpacity in colorOpacities)
	{
#>
                                     Color <#= colorOpacity.Name #>,
<#
	}
#>
                                     Color value)
        {
            Name = name;
            Value = value;

<#
	foreach (var colorOpacity in colorOpacities)
	{
#>
            this.<#= colorOpacity.Name #> = <#= colorOpacity.Name #>;
<#
	}
#>
        }

<#
	foreach (var colorOpacity in colorOpacities)
	{
#>
        public Color <#= colorOpacity.Name #> { get; }
<#
	}
#>

        public Color Value { get; }
        public string Name { get; }
    }
}
<#+
	class TemplateColor
	{
		public string Name;
		public string FieldName;
		public string Value;
		public ColorTransform Transform;
	}

	class TemplateColorOpacity
	{
		public string Name;
		public string Value;
		public string Postfix;
	}

	class TemplateFont
	{
		public string Name;
		public string FieldName;
		public string Value;
	}

	class TemplateFontSize
	{
		public string Name;
		public string FieldName;
		public string Value;
	}

	class ColorTransform
	{
		public static ColorTransform Parse(string source)
		{
			if (string.IsNullOrEmpty(source))
			{
				return null;
			}

			var parts = source.Split(':');
			if (parts.Length != 3)
			{
				throw new ArgumentException("Transform format is invalid. <SourceProperty>:<Effect>:<Coefficient>");
			}
			return new ColorTransform
			{
				Source = parts[0],
				Effect = parts[1],
				Coefficient = parts[2],
			};
		}

		public string Source;
		public string Effect;
		public string Coefficient;
	}
#>